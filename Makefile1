.PHONY: all clean fclean re

# SHELL
OS := $(shell uname -s)

# COLORS
BLUE = "\e[38;5;69m"
EOC = "\e[0m"

# COMPILER
CC = gcc
CFLAGS = -Wall -Wextra -Werror -Wunused

# PROGRAM NAME
NAME_PUSH = push_swap
NAME_CHECKER = checker

# HEADERS
DIR_H = include

H_PUSH = push_swap
H_PUSH := $(addprefix $(DIR_H)/, $(addsuffix .h, $(H_PUSH)))

H_CHECKER = checker
H_CHECKER := $(addprefix $(DIR_H)/, $(addsuffix .h, $(H_CHECKER)))

# LIB (LIBFT, GET_NEXT_LINE, PRINTF)
DIRLIB = lib
LIB = lib.a
LIB_RULE = $(addsuffix .lib, $(DIRLIB)/)

# PROGRAM CHECKER
DIRCHEKER = src_checker
CHECKER_S = main extra extra_valid nodes_create nodes_func nodes_func_2 debug
CHECKER_S := $(addsuffix .c, $(CHECKER_S))

# PROGRAM PUSH_SWAP
DIRPUSH = src_push_swap
PUSH_S = main validation \
			solver_grouping solver_extra solver_extra_2 \
			solver_recursive_sort solver_recursive_action solver_recursive_extra \
			solver_simple_sort solver_simple_extra \
			extra nodes_create nodes_create_group \
			nodes_func nodes_func_2
PUSH_S := $(addsuffix .c, $(PUSH_S))

# FILE PATH TO LIB, CHECKER, PUSH_SWAP SRC/OBJ FILES
CHECKERSRCS = $(addprefix $(DIRCHEKER)/,$(CHECKER_S))
PUSHSRCS = $(addprefix $(DIRPUSH)/,$(PUSH_S))
LIBS = $(addprefix $(DIRLIB)/, $(LIB))

all: $(LIB_RULE) $(NAME_PUSH) $(NAME_CHECKER)

%.lib:
	@$(MAKE) -sC $(DIRLIB)

$(NAME_CHECKER) : $(CHECKERSRCS) $(H_CHECKER)
ifeq ($(OS), Linux)
	@$(CC) $(CFLAGS) $(CHECKERSRCS) $(LIBS) -I, $(H_CHECKER) -o $(NAME_CHECKER)
else ifeq ($(OS), Darwin)
	@$(CC) $(CFLAGS) $(CHECKERSRCS) $(LIBS) -I $(H_CHECKER) -o $(NAME_CHECKER)
endif
	@echo $(BLUE)"CHECKER COMPILED"$(EOC)

$(NAME_PUSH) : $(PUSHSRCS) $(H_PUSH)
ifeq ($(OS), Linux)
	@$(CC) $(CFLAGS) $(PUSHSRCS) $(LIBS) -I, $(H_PUSH) -o $(NAME_PUSH)
else ifeq ($(OS), Darwin)
	@$(CC) $(CFLAGS) $(PUSHSRCS) $(LIBS) -I $(H_PUSH) -o $(NAME_PUSH)
endif
	@echo $(BLUE)"PUSH_SWAP COMPILED" $(EOC)

clean:
	@$(MAKE) -sC $(DIRLIB) clean
fclean: clean
	@$(MAKE) -sC $(DIRLIB) fclean
	@rm -f $(NAME_PUSH)
	@rm -f $(NAME_CHECKER)
re: fclean all
